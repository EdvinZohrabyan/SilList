@model SO.SilList.Manager.Models.ViewModels.BusinessVm

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_InnerLayout.cshtml";

}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>BusinessVo</legend>

        @Html.HiddenFor(model => model.business.businessId)

        <div class="editor-label">
            @Html.LabelFor(model => model.business.siteId)
        </div>
        <div class="editor-field">
            @Html.Action("DropDownList", "Site", new { id = Model.business.siteId })
            <a href="@Url.Action("Index", "Site", new { backUrl = @Url.RouteUrl(ViewContext.RouteData.Values), backName = @ViewContext.RouteData.Values["controller"].ToString() })" class="btn">Sites</a>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.business.name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.business.name)
            @Html.ValidationMessageFor(model => model.business.name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.business.address)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.business.address)
            @Html.ValidationMessageFor(model => model.business.address)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.business.city)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.business.city)
            @Html.ValidationMessageFor(model => model.business.city)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.business.state)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.business.state)
            @Html.ValidationMessageFor(model => model.business.state)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.business.zip)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.business.zip)
            @Html.ValidationMessageFor(model => model.business.zip)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.business.isActive)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.business.isActive)
            @Html.ValidationMessageFor(model => model.business.isActive)
        </div>

        @* business image stuff below *@
        @{
            if (Model.imagesToRemove != null)
            {
                for (int index = 0; index < Model.imagesToRemove.Count; ++index)
                {
                    <hr />
                    @Html.HiddenFor(x => x.imagesToRemove[index].imageIdStr);
                    <br />
                    <img src="@Model.imagesToRemove[index].imageUrlStr" width="100px"  id="img_@index" />
        
                    @: Uncheck to remove: 
                    @Html.CheckBoxFor(m => m.imagesToRemove[index].imageIsChecked, new { id = "removeImg_" + index.ToString() })
                }
                    <br />
            }
        }
        <hr />
        @Html.Partial("../Image/_ImagePickerControls")
        <br />
        @* end of business images stuff *@

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    <a href="@Url.Action("Index")" class="btn btn-info">Back to List</a>
</div>
