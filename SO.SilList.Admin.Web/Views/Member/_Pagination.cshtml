@model SO.SilList.Manager.Models.ViewModels.MemberVm

<script type="text/javascript">
    function onClickPagination(pageNum) {
        $('#pageNumber').val(pageNum); 
        $('#filterForm').submit();
        return false;
    }
</script>

<div class="pagination pull-left">
    <b>@Html.Raw(Model.FromToTextOfPagination())</b>
</div>
<div class="pagination pull-right">
    @Html.HiddenFor(m => m.pageNumber)
    

    <ul>
        @if (Model.pageNumber == null)
        {
            <h1><b>Handle the pageNumber NULL situation</b></h1>
        }

        @if (Model.pageCount > 1)
        {
            string enableFirstOrPrev = (Model.pageNumber == null || Model.pageNumber.Value < 2) ? "disabled" : "enabled";
            string enableLastOrNext = (Model.pageNumber == null || Model.pageNumber.Value == Model.pageCount) ? "disabled" : "enabled";
            int prevPageNum = Model.pageNumber.Value - 1;
            int nextPageNum = Model.pageNumber.Value + 1;
            int lastPageNum = Model.pageCount;
            
            <li class="@enableFirstOrPrev"><a href="#" onclick="onClickPagination(1)">First</a></li>
            <li class="@enableFirstOrPrev"><a href="#" onclick="onClickPagination(@prevPageNum)">Prev</a></li>
        
            int firstVisiblePage = Model.FirstVisiblePage();
            int lastVisiblePageNum = Model.LastVisiblePage();
            for (; firstVisiblePage <= lastVisiblePageNum; ++firstVisiblePage)
            {
                string enable = Model.pageNumber == firstVisiblePage ? "disabled" : "enabled";
            <li class="@enable"><a href="#" onclick="onClickPagination(@firstVisiblePage)">@firstVisiblePage</a></li>
            }

            <li class="@enableLastOrNext"><a href="#" onclick="onClickPagination(@nextPageNum)">Next</a></li>
            <li class="@enableLastOrNext"><a href="#" onclick="onClickPagination(@lastPageNum)">Last</a></li>
        }
    </ul>
</div>
